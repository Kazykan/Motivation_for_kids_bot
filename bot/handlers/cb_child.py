"""–û–ø—Ä–æ—Å–Ω–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è —Ä–æ–¥–∏—Ç–µ–ª—è"""
import sys

from aiogram import Router, types, F
from aiogram.filters import Command, CommandStart
from aiogram.filters.text import Text
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.utils.keyboard import InlineKeyboardBuilder


sys.path.append("..")
from bot.keyboards.kb_parent import kb_share_phone
from bot.cbdata import ActivityChildCFactory, ActivityDayCompletionNotificationCFactory, ChildInfoCFactory
from db_service.service import activity_to_text, convert_date, valid_number
from db_service.dbservice import ActivityDayDB, ChildDB, get_navigation_arrows_by_days_of_week, report_table_child
from db_service.pydantic_model import Activity_serialize, Child_serialize_activities


router = Router()


class AddChildStatesGroup(StatesGroup):
    """–ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã –æ–ø—Ä–æ—Å–Ω–∏–∫–∞ –ø–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –†–µ–±–µ–Ω–∫–∞"""
    child_phone = State()


def ikb_child_total_info(child_id: int):
    """–≤–∞–ø–≤–∞–ø"""
    builder = InlineKeyboardBuilder()
    builder.button(text='–û–±—â–∏–π –∏—Ç–æ–≥–æ',
            callback_data=ChildInfoCFactory(id=child_id, day='False'))
    builder.adjust(1)
    return builder.as_markup()


def ikb_child_completion_notification_for_parents(child_id: int, activity_day_id: int):
    """–ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è"""
    builder = InlineKeyboardBuilder()
    builder.button(text=f'üÜó —è –≤—ã–ø–æ–ª–Ω–∏–ª —ç—Ç–æ –∑–∞–¥–Ω–∏–µ',
                   callback_data=ActivityDayCompletionNotificationCFactory(
        child_id=child_id,
        activity_day_id=activity_day_id,
        parent='no'))
    builder.button(text='üîô –ù–∞–∑–∞–¥',
            callback_data=ChildInfoCFactory(id=child_id, day='False'))
    builder.adjust(1)
    return builder.as_markup()


def ikb_child_activity_list(child_id: int, day=False):
    """–ö–Ω–æ–ø–∫–∏ —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π —Ä–µ–±–µ–Ω–∫–∞"""
    row = []
    child_info = Child_serialize_activities.validate(ChildDB.get_data(child_id=child_id))
    builder = InlineKeyboardBuilder()

    navigation_button = get_navigation_arrows_by_days_of_week(child_id=child_id, day=day)
    if navigation_button:
        for button in navigation_button:
            builder.button(text=button['text'],
                    callback_data=ChildInfoCFactory(id=child_id, day=button['day']))
        row.append(navigation_button[0]['row'])  # –±–µ—Ä–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –∏–∑ –∫–ª—é—á–∞ –ø–µ—Ä–≤–æ–≥–æ –ø–æ —Å–ø–∏—Å–∫—É –∑–Ω–∞—á–µ–Ω–∏–π

    for activity in child_info.activities:
        builder.button(text=f'{activity.name}',
                        callback_data=ActivityChildCFactory(
                        activity_id=activity.id))
        row.append(1)
    builder.adjust(*row)
    return builder.as_markup()


@router.callback_query(ActivityChildCFactory.filter())
async def cb_child_fab(callback: types.CallbackQuery,
                                callback_data: ActivityChildCFactory) -> None:
    """–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –ø—Ä–æ –æ–¥–Ω–æ –∑–∞–¥–∞–Ω–∏–µ + –æ—Ç–º–µ—Ç–∫–∞ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏"""
    activity = Activity_serialize.validate(
        ChildDB.get_activity_one(activity_id=int(callback_data.activity_id)))
    info = activity_to_text(activity)
    activity_day_these_day = ActivityDayDB.there_is_for_today(activity_id=int(callback_data.activity_id))  # –ï—Å—Ç—å —ç—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å
    print(f'activity_day_these_day   ---- {activity_day_these_day}')
    if activity_day_these_day: # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
        await callback.message.edit_text(
            text=f'<code>{info}\n</code>'
            f'–ï—Å–ª–∏ –≤—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ <b>—Å–µ–≥–æ–¥–Ω—è</b> –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –≤–∞—à–∏–º —Ä–æ–¥–∏—Ç–µ–ª—è–º –ø—Ä–∏–¥–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –æ–Ω–∏ —Ä–µ—à–∞—Ç —Å–¥–µ–ª–∞–ª–∏ –≤—ã –µ–≥–æ –∏–ª–∏ –Ω–µ—Ç',
            reply_markup=ikb_child_completion_notification_for_parents(
                child_id=activity.child_id, activity_day_id=activity_day_these_day))
    else:
        await callback.message.edit_text(text=f'<code>{info}\n</code>',
                                        reply_markup=ikb_child_total_info(child_id=activity.child_id))


@router.callback_query(ChildInfoCFactory.filter())
async def cb_child_info_fab(callback: types.CallbackQuery,
                            callback_data: ChildInfoCFactory) -> None:
    """–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π —Ä–µ–±–µ–Ω–∫–∞ + –æ—Ç—á–µ—Ç"""
    child_info = Child_serialize_activities.validate(ChildDB.get_data(child_id=callback_data.id))
    info = report_table_child(child_info, day=convert_date(callback_data.day))
    await callback.message.edit_text(text=f'<code>{info}\n</code>\n',
        reply_markup=ikb_child_activity_list(child_id=int(callback_data.id), day=callback_data.day))


@router.callback_query(Text('cb_child_info'))
async def cb_add_child(callback: types.CallbackQuery, state: FSMContext) -> None:
    """–ü–µ—Ä–≤—ã–π –ø—É–Ω–∫—Ç –æ–ø—Ä–æ—Å–Ω–∏–∫–∞ –ø–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –†–µ–±–µ–Ω–∫–∞"""
    child_data = ChildDB.check_is_bot_user_id(bot_user_id=int(callback.from_user.id)) # –ü–æ–ª—É—á–µ–º –µ–≥–æ –¥–∞–Ω–Ω—ã–µ
    if child_data is None:  # –µ—Å–ª–∏ —Ä–µ–±–µ–Ω–∫–∞ –Ω–µ—Ç, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º
        await callback.message.answer(text="–î–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –Ω—É–∂–µ–Ω –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
                                  reply_markup=kb_share_phone())
        await state.set_state(AddChildStatesGroup.child_phone)
    else: # –µ—Å–ª–∏ –µ—Å—Ç—å –∑–∞–ø—É—Å–∫–∞–µ–º –º–µ–Ω—é —Ä–∞–±–æ—Ç—ã —Å –Ω–∏–º
        child_info = Child_serialize_activities.validate(child_data)
        info = report_table_child(child_info)
        await callback.message.edit_text(text=f'<code>{info}\n</code>\n',
                            reply_markup=ikb_child_activity_list(child_id=child_info.id))


@router.message(F.contact,
                AddChildStatesGroup.child_phone)
async def cb_add_parent_number(message: types.Message, state: FSMContext) -> None:
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–±–µ–Ω–∫–∞ - 2 —ç—Ç–∞–ø –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    child_number = valid_number(message.contact.phone_number)  # –ü–æ–ª—É—á–µ–º –µ–≥–æ –¥–∞–Ω–Ω—ã–µ
    child_data = ChildDB.check_is_phone(child_number=child_number)
    if child_data:  # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã
        child_info = Child_serialize_activities.validate(child_data)
        await message.answer(text=f'{child_info}')
        if child_info.bot_user_id is None: # –ï—Å–ª–∏ –Ω–µ—Ç bot_user_id –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            ChildDB.update(child_id=child_info.id, bot_user_id=message.from_user.id)
        info = report_table_child(child_info)
        await message.answer(text=f'<code>{info}\n</code>\n {child_info}',
                            reply_markup=ikb_child_activity_list(child_id=child_info.id))
