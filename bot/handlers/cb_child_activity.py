"""–†–∞–±–æ—Ç–∞ —Å —Ä–µ–±–µ–Ω–∫–æ–º –∏ –µ–≥–æ –∑–∞–¥–∞–Ω–∏—è–º–∏"""
import sys

from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder


sys.path.append("..")
from bot.statesgroup import AddActivityStatesGroup
from bot.cbdata import ActivityCallbackFactory, AddActivityCallbackFactory, ChildCallbackFactory, DeleteActivityCallbackFactory, TickChangeActivityCallbackFactory, ChangeOneWeekOnActivityCallbackFactory
from db_service.dbservice import add_activity_week, change_activity_day_is_done, delete_activity_week, get_activity_day, get_activity_week, get_child_activity_one
from db_service.pydantic_model import Activity_day_serializer, Activity_serialize, Child_serialize_activities, Activity_base
from db_service.service import activity_to_text, is_weekday_on, get_child_gender_emoji
from db_service.dbservice import add_activity, get_child_data, get_weeks_list_for_activities, report_table_child


router = Router()


def ikb_child_menu(child_id: int):
    """–ö–Ω–æ–ø–∫–∏ —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π —Ä–µ–±–µ–Ω–∫–∞ (–æ—Ç–º–µ—Ç–∏—Ç—å, –≤—ã–±—Ä–∞—Ç—å –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏, —É–¥–∞–ª–∏—Ç—å)
    + –∫–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –∑–∞–¥–∞–Ω–∏–µ"""
    child_info = Child_serialize_activities.validate(get_child_data(child_id=child_id))
    builder = InlineKeyboardBuilder()
    row = []
    for activity in child_info.activities:
        builder.button(text=f'{activity.name}',
                        callback_data=ActivityCallbackFactory(
                        activity_id=activity.id, tick='no'))
        builder.button(text=f'‚úîÔ∏èüìù',
                        callback_data=ActivityCallbackFactory(
                        activity_id=activity.id, tick='yes'))
        builder.button(text=f'üõ†Ô∏èüìÖ',
            callback_data=ChangeOneWeekOnActivityCallbackFactory(
            week_id=1, activity_id=activity.id, edit=False))
        builder.button(text=f'üóë',
                        callback_data=DeleteActivityCallbackFactory(activity_id=activity.id))
        row.append(4)
    row.append(2)
    builder.button(text='‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ',
                    callback_data=AddActivityCallbackFactory(child_id=child_info.id))
    builder.button(text='üîô –ù–∞–∑–∞–¥', callback_data="cb_parent")
    builder.adjust(*row)
    return builder.as_markup()


def ikb_activity_tick(activity_id: int):
    """–û–¥–Ω–æ –∑–∞–¥–∞–Ω–∏–µ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ –¥–Ω—è–º"""
    activity = Activity_serialize.validate(
        get_child_activity_one(activity_id=activity_id))
    builder = InlineKeyboardBuilder()
    days = sorted(activity.activity_days, key=lambda x: x.day)  # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ
    for day in days:
        if day.is_done:
            is_done = '‚úÖ'
        else: is_done = '‚ùå'
        builder.button(text=f'{day.day.strftime("%a %d %b")} {is_done}',
                       callback_data='cb_activity_day_one')
        builder.button(text=f'–∏–∑–º–µ–Ω–∏—Ç—å üîÑ',
            callback_data=TickChangeActivityCallbackFactory(activity_day_id=day.id))
    builder.button(text='–ü–µ—Ä–µ–π—Ç–∏ —Å–ø–∏—Å–∫—É –∑–∞–¥–∞–Ω–∏–π', callback_data=ChildCallbackFactory(id=activity.child_id))
    builder.adjust(2)
    return builder.as_markup()


def ikb_weeks(activity_id: int) -> types.InlineKeyboardMarkup:
    """–ö–Ω–æ–ø–∫–∏ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏"""
    activity_info = Activity_serialize.validate(get_weeks_list_for_activities(activity_id))
    builder = InlineKeyboardBuilder()
    for week_id, value in is_weekday_on(activity_info.weeks).items():
        builder.button(text=f'{value}',
            callback_data=ChangeOneWeekOnActivityCallbackFactory(
            week_id=week_id, activity_id=activity_id, edit=True))
    builder.button(text='–ü–µ—Ä–µ–π—Ç–∏ —Å–ø–∏—Å–∫—É –∑–∞–¥–∞–Ω–∏–π', callback_data=ChildCallbackFactory(id=activity_info.child_id))
    builder.adjust(7)
    return builder.as_markup()


@router.callback_query(TickChangeActivityCallbackFactory.filter())
async def cb_tick_change_activity_fab(callback: types.CallbackQuery,
                    callback_data: TickChangeActivityCallbackFactory
                    ) -> None:
    """ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è –ø–æ –¥–Ω—è–º"""
    try:
        change_activity_day_is_done(activity_day_id=int(callback_data.activity_day_id))
        # TODO: –£–±—Ä–∞—Ç—å –ª–∏—à–Ω–∏–π –∑–∞–ø—Ä–æ—Å —Å–Ω–∏–∑—É
        activity_day = Activity_day_serializer.validate(
            get_activity_day(activity_day_id=callback_data.activity_day_id))
        activity = Activity_serialize.validate(
        get_child_activity_one(activity_id=int(activity_day.activity_id)))
        info = activity_to_text(activity)
        await callback.message.edit_text(text=f'<code>{info}\n</code>',
                                        reply_markup=ikb_activity_tick(activity.id))
    except:
        await callback.message.answer('–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞')


@router.callback_query(ActivityCallbackFactory.filter())
async def cb_child_activity_fab(callback: types.CallbackQuery,
                                callback_data: ActivityCallbackFactory) -> None:
    """–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –ø—Ä–æ –∑–∞–¥–∞–Ω–∏–µ + –æ—Ç–º–µ—Ç–∫–∞ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏"""
    # TODO: –£–±—Ä–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ 3 —Å—Ç—Ä–æ—á–∫–∏ –≤–Ω–∏–∑
    activity = Activity_serialize.validate(
        get_child_activity_one(activity_id=int(callback_data.activity_id)))
    info = activity_to_text(activity)
    if callback_data.tick == 'no':
        await callback.message.edit_text(text=f'<code>{info}\n</code>',
                                        reply_markup=ikb_child_menu(child_id=activity.child_id))
    else:
        await callback.message.edit_text(text=f'<code>{info}\n</code>',
                                        reply_markup=ikb_activity_tick(activity.id))


@router.callback_query(ChildCallbackFactory.filter())
async def cb_child_info_fab(callback: types.CallbackQuery,
                            callback_data: ChildCallbackFactory) -> None:
    """–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π —Ä–µ–±–µ–Ω–∫–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–∏—Ç—å –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏—è"""
    # TODO: –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –¥–æ—Å—Ç—É–ø–∞ —Ä–æ–¥–∏—Ç–µ–ª—è –∫ —ç—Ç–æ–º—É —Ä–µ–±–µ–Ω–∫—É
    child_info = Child_serialize_activities.validate(get_child_data(child_id=callback_data.id))
    info = report_table_child(child_info)
    await callback.message.edit_text(text=f'<code>{info}\n</code>\n'
        f'–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π {get_child_gender_emoji(child_info.sex)} {child_info.name}',
        reply_markup=ikb_child_menu(child_id=int(callback_data.id)))


@router.callback_query(AddActivityCallbackFactory.filter())
async def cb_child_add_activity(callback: types.CallbackQuery,
                                state: FSMContext,
                                callback_data: AddActivityCallbackFactory) -> None:
    """–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è —Ä–µ–±–µ–Ω–∫–∞"""
    child_info = Child_serialize_activities.validate(
        get_child_data(child_id=callback_data.child_id))
    # TODO: –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –¥–æ—Å—Ç—É–ø–∞ —Ä–æ–¥–∏—Ç–µ–ª—è –∫ —ç—Ç–æ–º—É —Ä–µ–±–µ–Ω–∫—É
    await callback.message.edit_text(f'–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è: {get_child_gender_emoji(child_info.sex)} {child_info.name}\n'
                                  f'–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è, –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ —Å–æ—Å—Ç–æ—è—â–µ–µ –∏–∑ –æ–¥–Ω–æ–≥–æ —Å–ª–æ–≤–∞...\n')
    await state.update_data(child_id=child_info.id)
    await state.set_state(AddActivityStatesGroup.name)


@router.message(AddActivityStatesGroup.name)
async def child_add_activity_name(message: types.Message, state: FSMContext) -> None:
    """–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è —Ä–µ–±–µ–Ω–∫–∞ - 2 —ç—Ç–∞–ø –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è"""
    await state.update_data(name=message.text)
    data = await state.get_data()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ FSM
    await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è: <b>{data['name']}</b>")
    await state.set_state(AddActivityStatesGroup.title)


@router.message(AddActivityStatesGroup.title)
async def child_add_activity_title(message: types.Message, state: FSMContext) -> None:
    """–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è —Ä–µ–±–µ–Ω–∫–∞ - 3 —ç—Ç–∞–ø –ø—Ä–æ—Ü–µ–Ω—Ç –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
    await state.update_data(title=message.text)
    data = await state.get_data()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ FSM
    await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è –∑–∞–¥–∞–Ω–∏—è - <b>{data['name']}</b>"
                         f"\n–æ—Ç 1 –¥–æ 100 % –≤–≤–æ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã")
    await state.set_state(AddActivityStatesGroup.percent_complete)


@router.message(AddActivityStatesGroup.percent_complete)
async def child_add_activity_percent_complete(message: types.Message, state: FSMContext) -> None:
    """–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è —Ä–µ–±–µ–Ω–∫–∞ - 4 —ç—Ç–∞–ø —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
    data = await state.get_data()
    try:
        if 0 >= int(message.text) < 100:
            raise ValueError
        await state.update_data(percent_complete=int(message.text))
    except ValueError:
        await message.edit_text(f"–æ—Ç 1 –¥–æ 100 % –≤–≤–æ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã!"
            f"–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è –∑–∞–¥–∞–Ω–∏—è - {data['name']}")
        await state.set_state(AddActivityStatesGroup.percent_complete)
    await message.answer(f"–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è –∑–∞–¥–∞–Ω–∏—è: {data['name']}")
    await state.set_state(AddActivityStatesGroup.cost)


@router.message(AddActivityStatesGroup.cost)
async def child_add_activity_cost(message: types.Message, state: FSMContext) -> None:
    """–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è —Ä–µ–±–µ–Ω–∫–∞ - 5 —ç—Ç–∞–ø –≤—ã–±–æ—Ä –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏"""
    data = await state.get_data()
    try:
        if 0 >= int(message.text) < 100000:
            raise ValueError
        await state.update_data(cost=int(message.text))
        await state.update_data(max_cost=int(message.text))
    except ValueError:
        await message.edit_text(f"–æ—Ç 1 –¥–æ 100 000 ‚ÇΩ –≤–≤–æ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã!"
            f"–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è –∑–∞–¥–∞–Ω–∏—è: {data['name']}")
        await state.set_state(AddActivityStatesGroup.cost)
    data = await state.get_data()  # –ø–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ state
    try:
        info = Activity_base.validate(data)
        activity = Activity_serialize.validate(add_activity(info))  # –°–æ–∑–¥–∞–µ–º –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –ø–æ–ª—É—á–∞–µ–º –µ–µ –¥–∞–Ω–Ω—ã–µ
        await message.answer(f"<code>{activity_to_text(activity)}</code>"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è"
            f"<b> –í–ù–ò–ú–ê–ù–ò–ï !!! </b> –ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–≤–µ–¥—É—Ç –∫ –æ–±–Ω—É–ª–µ–Ω–∏—é –æ—Ç–º–µ—Ç–æ–∫ –≤ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–µ",
            reply_markup=ikb_weeks(activity_id=activity.id))
        await state.clear()
    except ValueError as e:
        await message.edit_text(f'{e}')


@router.callback_query(ChangeOneWeekOnActivityCallbackFactory.filter())
async def cb_change_week_on_activity(callback: types.CallbackQuery,
                                  callback_data: ChangeOneWeekOnActivityCallbackFactory) -> None:
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –≤ –∑–∞–¥–∞—á–µ —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –µ—Å–ª–∏ –Ω–µ—Ç –¥–æ–±–∞–≤–ª—è–µ–º"""
    if callback_data.edit:
        try:
            week = get_activity_week(activity_id=callback_data.activity_id,
                            week_id=callback_data.week_id)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å—å –≤ –ë–î
            if week: # –ï—Å–ª–∏ –µ—Å—Ç—å —É–¥–∞–ª—è–µ–º
                delete_activity_week(activity_id=callback_data.activity_id,
                        week_id=callback_data.week_id)
            else: # –ï—Å–ª–∏ –Ω–µ—Ç –¥–æ–±–∞–≤–ª—è–µ–º
                add_activity_week(activity_id=callback_data.activity_id,
                        week_id=callback_data.week_id)
        except ValueError as e:
            await callback.message.answer(f'{e}')
    activity = Activity_serialize.validate(
        get_child_activity_one(activity_id=int(callback_data.activity_id)))
    info = activity_to_text(activity)
    await callback.message.edit_text(
        text=f'<code>{info}</code>\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è\n'
            f'<b> –í–ù–ò–ú–ê–ù–ò–ï !!! </b> –ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–≤–µ–¥—É—Ç –∫ –æ–±–Ω—É–ª–µ–Ω–∏—é –æ—Ç–º–µ—Ç–æ–∫ –≤ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–µ',
            reply_markup=ikb_weeks(callback_data.activity_id)
        )
