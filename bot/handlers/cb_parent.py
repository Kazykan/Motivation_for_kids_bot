"""–û–ø—Ä–æ—Å–Ω–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è —Ä–æ–¥–∏—Ç–µ–ª—è"""
import sys

from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram import Dispatcher, types
from pydantic import BaseModel

sys.path.append("..")
from db_service.service import valid_number
from db_service.dbservice import add_parent_and_child, is_parent_in_db
from db_service.pydantic_model import Parent_and_child, Parent_base, Children_in_parent_base


def ikb_sex() -> types.InlineKeyboardMarkup:
    """–ö–Ω–æ–ø–∫–∏ –ø–æ–ª —á–µ–ª–æ–≤–µ–∫–∞"""
    ikb = types.InlineKeyboardMarkup(row_width=2, inline_keyboard=[
        [types.InlineKeyboardButton(text='–ú—É–∂. üë®', callback_data='cb_male'),
         types.InlineKeyboardButton(text='–ñ–µ–Ω. üë©', callback_data='cb_female')],
    ], markup=types.ReplyKeyboardRemove())
    return ikb


def kb_share_phone() -> types.KeyboardButton:
    button_phone = types.KeyboardButton(text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º ‚òéÔ∏è", request_contact=True)
    keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    keyboard.add(button_phone)
    return keyboard


def ikb_parent_children(parent_data):
    """–ö–Ω–æ–ø–∫–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –¥–µ—Ç–µ–π"""
    data = Parent_base.parse_obj(parent_data)
    ikb = types.InlineKeyboardMarkup()
    ikb.row_width = 1
    ikb.markup = types.ReplyKeyboardRemove()
    for child in data.children:
        ikb.add(types.InlineKeyboardButton(text=f'{child.name} - —Ç–µ–ª.: 7¬∑¬∑¬∑{child.phone[5:]}', callback_data=f'cb_child_{child.id}'))
    return ikb


class AddParentStatesGroup(StatesGroup):
    """–ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã –æ–ø—Ä–æ—Å–Ω–∏–∫–∞ –ø–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –†–æ–¥–∏—Ç–µ–ª—è –∏ –¥–µ—Ç–µ–π"""
    parent_number = State()
    sex = State()
    child_phone = State()
    child_name = State()
    child_sex = State()


async def cb_add_parent(callback: types.CallbackQuery) -> None:
    """–ü–µ—Ä–≤—ã–π –ø—É–Ω–∫—Ç –æ–ø—Ä–æ—Å–Ω–∏–∫–∞ –ø–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –†–æ–¥–∏—Ç–µ–ª—è"""
    await callback.message.delete()
    parent_data = is_parent_in_db(int(callback.from_user.id)) # –ü–æ–ª—É—á–µ–º –µ–≥–æ –¥–∞–Ω–Ω—ã–µ
    if parent_data is None:  # –µ—Å–ª–∏ —Ä–æ–¥–∏—Ç–µ–ª—è –Ω–µ—Ç, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º
        await callback.message.answer(text="–î–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –Ω—É–∂–µ–Ω –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∞–∂–º–∏—Ç–µ –≤–Ω–∏–∑—É –∫–Ω–æ–ø–∫—É - –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º",
                                  reply_markup=kb_share_phone())
        await AddParentStatesGroup.parent_number.set()
    else: # –µ—Å–ª–∏ –µ—Å—Ç—å –∑–∞–ø—É—Å–∫–∞–µ–º –º–µ–Ω—é —Ä–∞–±–æ—Ç—ã —Å –Ω–∏–º
        await callback.message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–±–µ–Ω–∫–∞', reply_markup=ikb_parent_children(parent_data))



async def cb_add_parent_number(message: types.Message, state: FSMContext) -> None:
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ä–æ–¥–∏—Ç–µ–ª—è - 2 —ç—Ç–∞–ø –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    contact = message.contact  # –ü–æ–ª—É—á–µ–º –µ–≥–æ –¥–∞–Ω–Ω—ã–µ
    await message.delete()
    await message.answer(f"–°–ø–∞—Å–∏–±–æ, {contact.full_name}.\n", reply_markup=types.ReplyKeyboardRemove())
    async with state.proxy() as data:
        data['phone_number'] = valid_number(contact.phone_number)
        data['name'] = contact.full_name
        data['bot_user_id'] = contact.user_id
    await message.answer(f"–í–∞—à –Ω–æ–º–µ—Ä {contact.phone_number} –±—ã–ª –ø–æ–ª—É—á–µ–Ω. \n"
                         f"–í–∞—à id {contact.user_id}. \n"
                         f"–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª",
                         reply_markup=ikb_sex())
    await AddParentStatesGroup.sex.set()


async def cb_add_parent_sex(callback: types.CallbackQuery, state: FSMContext) -> None:
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ä–æ–¥–∏—Ç–µ–ª—è - 3 —ç—Ç–∞–ø –ø–æ–ª —Ä–æ–¥–∏—Ç–µ–ª—è"""
    await callback.message.delete()
    async with state.proxy() as data:
        if callback.data == 'cb_male':  # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ callback_query_handler –∫–∞–∫–∞—è –∏–º–µ–Ω–Ω–æ –∫–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞
            data['sex'] = 1 # Standard ISO/IEC 5218 0 - not known, 1 - Male, 2 - Female, 9 - Not applicable
        else: data['sex'] = 2
    await callback.message.answer(f'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Ä–µ–±–µ–Ω–∫–∞', reply_markup=types.ReplyKeyboardRemove()) # TODO: –î–æ–±–∞–≤–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ inline –∫–Ω–æ–ø–æ–∫
    await AddParentStatesGroup.child_phone.set()


async def cb_add_parent_child_phone(message: types.Message, state: FSMContext) -> None:
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ä–æ–¥–∏—Ç–µ–ª—è - 4 —ç—Ç–∞–ø –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Ä–µ–±–µ–Ω–∫–∞"""
    await message.delete()
    child_number = valid_number(message.text)
    if child_number:
        async with state.proxy() as data:
            data['child_number'] = child_number
        await message.answer(f'–î–ª—è –Ω–æ–º–µ—Ä–∞: {data["child_number"]} –≤–≤–µ–¥–∏—Ç–µ –∏–º—è —Ä–µ–±–µ–Ω–∫–∞')
        await AddParentStatesGroup.child_name.set()
    else:
        await message.reply(f'–ù–æ–º–µ—Ä - "{message.text}" –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ 7987 654 32 10')


async def cb_add_parent_child_name(message: types.Message, state: FSMContext) -> None:
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ä–æ–¥–∏—Ç–µ–ª—è - 5 —ç—Ç–∞–ø –∏–º—è —Ä–µ–±–µ–Ω–∫–∞"""
    async with state.proxy() as data:
        data['child_name'] = message.text
    await message.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª - {data["child_name"]}', reply_markup=ikb_sex())
    await AddParentStatesGroup.child_sex.set()


async def cb_add_parent_child_sex(callback: types.CallbackQuery, state: FSMContext) -> None:
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ä–æ–¥–∏—Ç–µ–ª—è - 6 —ç—Ç–∞–ø –ø–æ–ª —Ä–µ–±–µ–Ω–∫–∞"""
    await callback.message.delete()
    async with state.proxy() as data:
        if callback.data == 'cb_male':  # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ callback_query_handler –∫–∞–∫–∞—è –∏–º–µ–Ω–Ω–æ –∫–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞
            data['child_sex'] = 1 # Standard ISO/IEC 5218 0 - not known, 1 - Male, 2 - Female, 9 - Not applicable
        else: data['child_sex'] = 2
    info = Parent_and_child.parse_obj(data._data)
    info_db = add_parent_and_child(info)
    await callback.message.answer(f'–î–æ–±–∞–≤–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ {info_db}') # TODO: –î–æ–±–∞–≤–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ inline –∫–Ω–æ–ø–æ–∫
    await state.finish()


def register_cb_handlers_add_parent(dp: Dispatcher):
    dp.register_callback_query_handler(cb_add_parent,
                                       text_contains='cb_parent',
                                       state='*')
    # —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–ª–µ–¥ —ç—Ç–∞–ø–∞ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π, –≤ —Å–ª—É—á–∞–µ –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä
    dp.register_message_handler(cb_add_parent_number,
                                content_types=types.ContentType.CONTACT,
                                state=AddParentStatesGroup.parent_number)
    dp.register_callback_query_handler(cb_add_parent_sex,
                                       text_contains='cb_male',
                                       state=AddParentStatesGroup.sex)  # TODO: –¥–≤–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –∫–æ–ª–±–µ–∫–∞ cb_male –∏ cb_female –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞–∫ –∏—Ö –º–æ–∂–Ω–æ –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å
    dp.register_callback_query_handler(cb_add_parent_sex,
                                       text_contains='cb_female',
                                       state=AddParentStatesGroup.sex)
    dp.register_message_handler(cb_add_parent_child_phone, state=AddParentStatesGroup.child_phone)
    dp.register_message_handler(cb_add_parent_child_name, state=AddParentStatesGroup.child_name)
    dp.register_callback_query_handler(cb_add_parent_child_sex,
                                       text_contains='cb_male',
                                       state=AddParentStatesGroup.child_sex)  # TODO: –¥–≤–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –∫–æ–ª–±–µ–∫–∞ cb_male –∏ cb_female –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞–∫ –∏—Ö –º–æ–∂–Ω–æ –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å
    dp.register_callback_query_handler(cb_add_parent_child_sex,
                                       text_contains='cb_female',
                                       state=AddParentStatesGroup.child_sex)